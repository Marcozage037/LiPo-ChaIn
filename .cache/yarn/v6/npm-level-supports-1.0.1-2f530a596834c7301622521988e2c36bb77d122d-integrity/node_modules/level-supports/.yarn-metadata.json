{
  "manifest": {
    "name": "level-supports",
    "version": "1.0.1",
    "description": "Create a manifest describing the abilities of a levelup or abstract-leveldown db",
    "license": "MIT",
    "scripts": {
      "test": "standard && hallmark && (nyc -s node test/self.js | faucet) && nyc report",
      "test-browser-local": "airtap --coverage --local test/self.js",
      "coverage": "nyc report --reporter=text-lcov | coveralls",
      "hallmark": "hallmark --fix",
      "dependency-check": "dependency-check --no-dev . test/*.js",
      "prepublishOnly": "npm run dependency-check"
    },
    "files": [
      "test",
      "CHANGELOG.md",
      "CONTRIBUTORS.md",
      "index.js"
    ],
    "dependencies": {
      "xtend": "^4.0.2"
    },
    "devDependencies": {
      "airtap": "^2.0.4",
      "coveralls": "^3.0.6",
      "dependency-check": "^4.1.0",
      "faucet": "^0.0.1",
      "hallmark": "^2.0.0",
      "level-community": "^3.0.0",
      "nyc": "^14.1.1",
      "standard": "^14.3.1",
      "tape": "^4.11.0"
    },
    "hallmark": {
      "community": "level-community"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Level/supports.git"
    },
    "homepage": "https://github.com/Level/supports",
    "keywords": [
      "abstract-leveldown",
      "database",
      "db",
      "level",
      "levelup",
      "manifest"
    ],
    "engines": {
      "node": ">=6"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-level-supports-1.0.1-2f530a596834c7301622521988e2c36bb77d122d-integrity/node_modules/level-supports/package.json",
    "readmeFilename": "README.md",
    "readme": "# level-supports\n\n> **Create a manifest describing the abilities of a [`levelup`](https://github.com/Level/levelup) or [`abstract-leveldown`](https://github.com/Level/abstract-leveldown) db.**\n\n[![level badge][level-badge]](https://github.com/Level/awesome)\n[![npm](https://img.shields.io/npm/v/level-supports.svg?label=&logo=npm)](https://www.npmjs.com/package/level-supports)\n[![Node version](https://img.shields.io/node/v/level-supports.svg)](https://www.npmjs.com/package/level-supports)\n[![Travis](https://img.shields.io/travis/com/Level/supports.svg?logo=travis&label=)](https://travis-ci.com/Level/supports)\n[![Coverage Status](https://coveralls.io/repos/github/Level/supports/badge.svg)](https://coveralls.io/github/Level/supports)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![Backers on Open Collective](https://opencollective.com/level/backers/badge.svg?color=orange)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/level/sponsors/badge.svg?color=orange)](#sponsors)\n\n## Usage\n\n```js\nconst supports = require('level-supports')\n\ndb.supports = supports({\n  bufferKeys: true,\n  additionalMethods: {\n    approximateSize: true\n  }\n})\n```\n\nReceivers of the db can then use it like so:\n\n```js\nif (!db.supports.permanence) {\n  throw new Error('Persistent storage is required')\n}\n\nif (db.supports.bufferKeys && db.supports.promises) {\n  await db.put(Buffer.from('key'), 'value')\n}\n```\n\n## API\n\n### `manifest = supports([manifest, ..])`\n\nGiven zero or more manifest objects, returns a merged and enriched manifest object that has:\n\n- Truthy properties for each of the features listed below\n- An `additionalMethods` object\n\nFor future extensibility, the properties are truthy rather than strictly typed booleans. Falsy or absent properties are converted to `false`, other values are allowed:\n\n```js\nsupports().streams // false\nsupports({ streams: true }).streams // true\nsupports({ streams: {} }).streams // {}\nsupports({ streams: 1 }, { streams: 2 }).streams // 2\n```\n\nFor consumers of the manifest this means they should check support like so:\n\n```js\nif (db.supports.streams)\n```\n\nRather than:\n\n```js\nif (db.supports.streams === true)\n```\n\n**Note:** the manifest describes high-level features that typically encompass multiple methods of a db. It is currently not a goal to describe a full API, or versions of it.\n\n## Features\n\n### `bufferKeys` (boolean)\n\nDoes the db support [Buffer](https://nodejs.org/api/buffer.html) keys? May depend on runtime environment as well. Does _not_ include support of other binary types like typed arrays (which is why this is called `bufferKeys` rather than `binaryKeys`).\n\n### `snapshots` (boolean)\n\nDoes the db have snapshot guarantees (meaning that reads are unaffected by simultaneous writes)? Must be `false` if any of the following is true:\n\n- Reads don't operate on a [snapshot](https://github.com/Level/abstract-leveldown#iterator)\n- Snapshots are created asynchronously.\n\n### `permanence` (boolean)\n\nDoes data survive after process exit? Is `false` for e.g. [`memdown`](https://github.com/Level/memdown), typically `true`.\n\n### `seek` (boolean)\n\nDoes `db.iterator()` support [`seek(..)`](https://github.com/Level/abstract-leveldown/#iteratorseektarget)?\n\n#### `clear` (boolean)\n\nDoes db support [`db.clear(..)`](https://github.com/Level/abstract-leveldown/#dbclearoptions-callback)? For an overview, see [Level/community#79](https://github.com/Level/community/issues/79).\n\n### `status` (boolean)\n\nDoes db have a [`status`](https://github.com/Level/abstract-leveldown/#dbstatus) property? Currently available on `abstract-leveldown` implementations, but not `levelup`.\n\n### `deferredOpen` (boolean)\n\nCan operations like `db.put()` be called without explicitly opening the db? Like so:\n\n```js\nvar db = level()\ndb.put('key', 'value', callback)\n```\n\nRather than:\n\n```js\nvar db = level()\n\ndb.open(function (err) {\n  if (err) throw err\n  db.put('key', 'value', callback)\n})\n```\n\n_TBD: whether this also includes methods like `isOpen()` and `isClosed()`._\n\n### `openCallback` (boolean)\n\nDoes the db constructor take a callback?\n\n```js\nvar db = level(.., callback)\n```\n\nTo the same effect as:\n\n```js\nvar db = level()\ndb.open(.., callback)\n```\n\n### `createIfMissing`, `errorIfExists` (boolean)\n\nDoes `db.open(options, ..)` support these (`leveldown`) options?\n\n### `promises` (boolean)\n\nDo all db methods (that don't otherwise have a return value) support promises, in addition to callbacks? Such that, when a callback argument is omitted, a promise is returned:\n\n```js\ndb.put('key', 'value', callback)\nawait db.put('key', 'value')\n```\n\n_Note: iterators are currently exonerated because they, at the time of writing, don't support promises anywhere._\n\n### `streams` (boolean)\n\nDoes db have the methods `createReadStream`, `createKeyStream` and `createValueStream`, following the API currently documented in `levelup`?\n\n### `encodings` (boolean)\n\nDo all relevant db methods take `keyEncoding` and `valueEncoding` options?\n\n_TBD: what this means for `*asBuffer` options._\n\n### `additionalMethods` (object)\n\nIn the form of:\n\n```js\n{\n  foo: true,\n  bar: true\n}\n```\n\nWhich says the db has two methods, `foo` and `bar`, that are not part of the `abstract-leveldown` interface. It might be used like so:\n\n```js\nif (db.supports.additionalMethods.foo) {\n  db.foo()\n}\n```\n\nFor future extensibility, the properties of `additionalMethods` should be taken as truthy rather than strictly typed booleans. We may add additional metadata (see [#1](https://github.com/Level/supports/issues/1)).\n\n## Install\n\nWith [npm](https://npmjs.org) do:\n\n```\nnpm install level-supports\n```\n\n## Contributing\n\n[`Level/supports`](https://github.com/Level/supports) is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [Contribution Guide](https://github.com/Level/community/blob/master/CONTRIBUTING.md) for more details.\n\n## Donate\n\nTo sustain [`Level`](https://github.com/Level) and its activities, become a backer or sponsor on [Open Collective](https://opencollective.com/level). Your logo or avatar will be displayed on our 28+ [GitHub repositories](https://github.com/Level) and [npm](https://www.npmjs.com/) packages. ðŸ’–\n\n### Backers\n\n[![Open Collective backers](https://opencollective.com/level/backers.svg?width=890)](https://opencollective.com/level)\n\n### Sponsors\n\n[![Open Collective sponsors](https://opencollective.com/level/sponsors.svg?width=890)](https://opencollective.com/level)\n\n## License\n\n[MIT](LICENSE.md) Â© 2019-present [Contributors](CONTRIBUTORS.md).\n\n[level-badge]: https://leveljs.org/img/badge.svg\n",
    "licenseText": "# The MIT License (MIT)\n\n**Copyright Â© 2019-present [Contributors](CONTRIBUTORS.md).**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/level-supports/-/level-supports-1.0.1.tgz#2f530a596834c7301622521988e2c36bb77d122d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/level-supports/-/level-supports-1.0.1.tgz",
    "hash": "2f530a596834c7301622521988e2c36bb77d122d",
    "integrity": "sha512-rXM7GYnW8gsl1vedTJIbzOrRv85c/2uCMpiiCzO2fndd06U/kUXEEU9evYn4zFggBOg36IsBW8LzqIpETwwQzg==",
    "registry": "npm",
    "packageName": "level-supports",
    "cacheIntegrity": "sha512-rXM7GYnW8gsl1vedTJIbzOrRv85c/2uCMpiiCzO2fndd06U/kUXEEU9evYn4zFggBOg36IsBW8LzqIpETwwQzg== sha1-L1MKWWg0xzAWIlIZiOLDa7d9Ei0="
  },
  "registry": "npm",
  "hash": "2f530a596834c7301622521988e2c36bb77d122d"
}