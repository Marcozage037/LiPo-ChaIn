{
  "manifest": {
    "name": "sort-package-json",
    "version": "1.44.0",
    "description": "Sort an Object or package.json based on the well-known package.json keys",
    "keywords": [
      "keys",
      "object",
      "sort"
    ],
    "homepage": "https://github.com/keithamus/sort-package-json#readme",
    "bugs": {
      "url": "https://github.com/keithamus/sort-package-json/issues"
    },
    "repository": {
      "type": "git",
      "url": "git+ssh://git@github.com/keithamus/sort-package-json.git"
    },
    "license": "MIT",
    "author": {
      "name": "Keith Cirkel",
      "email": "npm@keithcirkel.co.uk",
      "url": "http://keithcirkel.co.uk/"
    },
    "main": "index.js",
    "types": "index.d.ts",
    "bin": {
      "sort-package-json": "cli.js"
    },
    "files": [
      "index.js",
      "index.d.ts",
      "cli.js"
    ],
    "scripts": {
      "lint": "eslint .",
      "semantic-release": "semantic-release",
      "sort-package-json": "node cli.js package.json --check",
      "test": "ava",
      "test-coverage": "nyc ava",
      "update-snapshot": "ava -u && node cli.js package.json"
    },
    "husky": {
      "hooks": {
        "pre-commit": "npm t && lint-staged",
        "commit-msg": "commitlint -E HUSKY_GIT_PARAMS"
      }
    },
    "commitlint": {
      "extends": [
        "@commitlint/config-conventional"
      ]
    },
    "lint-staged": {
      "*.js": [
        "eslint --fix"
      ],
      "*.ts": [
        "prettier --write"
      ],
      "package.json": [
        "node cli.js"
      ]
    },
    "prettier": {
      "semi": false,
      "singleQuote": true,
      "trailingComma": "all"
    },
    "eslintConfig": {
      "extends": [
        "standard",
        "plugin:prettier/recommended",
        "prettier/standard"
      ]
    },
    "ava": {
      "verbose": true
    },
    "dependencies": {
      "detect-indent": "^6.0.0",
      "detect-newline": "3.1.0",
      "git-hooks-list": "1.0.3",
      "globby": "10.0.0",
      "is-plain-obj": "2.1.0",
      "sort-object-keys": "^1.1.3"
    },
    "devDependencies": {
      "@commitlint/cli": "8.3.5",
      "@commitlint/config-conventional": "8.3.4",
      "ava": "3.5.1",
      "del": "5.1.0",
      "dot-prop": "^5.2.0",
      "eslint": "^6.8.0",
      "eslint-config-prettier": "^6.10.0",
      "eslint-config-standard": "^14.1.0",
      "eslint-plugin-import": "^2.20.1",
      "eslint-plugin-node": "^11.0.0",
      "eslint-plugin-prettier": "^3.1.2",
      "eslint-plugin-promise": "^4.2.1",
      "eslint-plugin-standard": "^4.0.1",
      "husky": "^4.2.3",
      "lint-staged": "^10.0.8",
      "make-dir": "3.0.2",
      "nyc": "^15.0.0",
      "prettier": "^2.0.4",
      "semantic-release": "17.0.5",
      "tempy": "0.4.0"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-sort-package-json-1.44.0-470330be868f8a524a4607b26f2a0233e93d8b6d-integrity/node_modules/sort-package-json/package.json",
    "readmeFilename": "README.md",
    "readme": "# Sort Package.json\n\n[![Build Status](https://travis-ci.org/keithamus/sort-package-json.svg)](https://travis-ci.org/keithamus/sort-package-json)\n\n## CLI\n\n### Run via npx (npm@5.2+ required)\n\n```bash\nnpx sort-package-json\n```\n\n### Install\n\n```bash\nnpm install --global sort-package-json\n```\n\n### Usage\n\n```bash\n$ cd my-project\n$ cat package.json\n{\n  \"dependencies\": {\n    \"sort-package-json\": \"1.0.0\",\n    \"sort-object-keys\": \"1.0.0\"\n  },\n  \"version\": \"1.0.0\",\n  \"name\": \"my-awesome-project\"\n}\n\n$ npx sort-package-json\npackage.json is sorted!\n\n$ cat package.json\n{\n  \"name\": \"my-awesome-project\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"sort-object-keys\": \"1.0.0\",\n    \"sort-package-json\": \"1.0.0\"\n  }\n}\n```\n\nCLI also supports multi file paths or [`glob`](https://github.com/sindresorhus/globby) - so you can give it a bunch of `package.json` file(s) to sort.\n\n```bash\n$ sort-package-json \"my-package/package.json\" \"other-package/package.json\"\n\n$ sort-package-json \"package.json\" \"packages/*/package.json\"\n```\n\n#### `--check` flag\n\nWhen you want to check if your files are sorted, you can run CLI with the `--check` flag (or `-c`). This will output a list of not sorted files, if any.\n\n```bash\n$ sort-package-json \"**/package.json\" --check\n\n# 5 matched files are sorted.\n\n\n$ sort-package-json \"**/package.json\" --check\n# foo/package.json\n# bar/package.json\n\n# 2 of 5 matched files are not sorted.\n```\n\n## API\n\n### Install\n\n```bash\nnpm install --save-dev sort-package-json\n```\n\n### Usage\n\n```js\nsortPackageJson(packageJson, options?)\n```\n\nPass a JSON string, return a new sorted JSON string.\\\nPass a JSON object, return a new sorted JSON object.\n\n```js\nconst sortPackageJson = require('sort-package-json')\n\nconst packageJsonString = `{\n  \"dependencies\": {\n    \"sort-package-json\": \"1.0.0\",\n    \"sort-object-keys\": \"1.0.0\"\n  },\n  \"version\": \"1.0.0\",\n  \"name\": \"my-awesome-project\"\n}`\n\nconsole.log(sortPackageJson(packageJsonString))\n/* => string:\n{\n  \"name\": \"my-awesome-project\",\n  \"version\": \"1.0.0\",\n  \"dependencies\": {\n    \"sort-object-keys\": \"1.0.0\",\n    \"sort-package-json\": \"1.0.0\"\n  }\n}\n*/\n\nconst packageJsonObject = JSON.parse(packageJsonString)\nconsole.log(sortPackageJson(packageJsonObject))\n/* => object:\n{\n  name: 'my-awesome-project',\n  version: '1.0.0',\n  dependencies: {\n    'sort-object-keys': '1.0.0',\n    'sort-package-json': '1.0.0'\n  }\n}\n*/\n```\n\n#### options.sortOrder\n\nType: `string[] | Function`\\\nDefault: `sortPackageJson.sortOrder`\n\nCustom ordering array or comparator function.\n\nIf an array, sort keys in ordering of `options.sortOrder`.\n\n**Notice**: fields not in this array, will still sort by `defaultSortOrder`\n\n```js\nconst sorted = sortPackageJson(packageJsonObject, {\n  sortOrder: ['version']\n})\n\nconsole.log(Object.keys(sorted))\n\n// -> [ 'version', 'name', 'dependencies' ]\n//                 ^^^^^^^^^^^^^^^^^^^^^^\n//                 `name` and `dependencies` are sorted by defaultSortOrder\n```\n\nIf a function, sort fields by [Array#sort(options.sortOrder)](https://developer.mozilla.org/en/docs/Web/JavaScript/Reference/Global_Objects/Array/sort#Description)\n\n```js\nconst sorted = sortPackageJson(packageJsonObject, {\n  sortOrder(left, right) {\n    return left.localeCompare(right)\n  }\n})\n\nconsole.log(Object.keys(sorted))\n\n// -> [ 'dependencies', 'name', 'version' ]\n```\n\n## Related tools\n\n- [ESLint Rule with Autofix](https://github.com/kellyselden/eslint-plugin-json-files#supported-rules)\n- [Prettier Plugin](https://github.com/matzkoh/prettier-plugin-packagejson)\n- [Visual Studio Code Extension](https://github.com/unional/vscode-sort-package-json)\n\n## Supported Libraries\n\n- [AVA](https://github.com/avajs/ava)\n- [Babel](https://babeljs.io/)\n- [Browserify](http://browserify.org/)\n- [commitlint](https://commitlint.js.org/)\n- [ESLint](https://eslint.org/)\n- [Husky](https://github.com/typicode/husky)\n- [Istanbul](https://istanbul.js.org/)\n- [Jest](https://jestjs.io/)\n- [lint-staged](https://github.com/okonet/lint-staged)\n- [Mocha](https://mochajs.org/)\n- [node-pre-gyp](https://github.com/mapbox/node-pre-gyp)\n- [npm-package-json-lint](https://npmpackagejsonlint.org/)\n- [Prettier](https://prettier.io/)\n- [remark](https://remark.js.org/)\n- [stylelint](https://github.com/stylelint/stylelint)\n- [xojs](https://github.com/xojs/xo)\n\n_Alphabetically ordered._\n\n## Automatically Sort\n\nThe package.json file can be sorted automatically before committing, install `husky` and `lint-staged` and add the following to your `package.json` file:\n\n```json\n{\n  \"husky\": {\n    \"hooks\": {\n      \"pre-commit\": \"lint-staged\"\n    }\n  },\n  \"lint-staged\": {\n    \"package.json\": [\n      \"sort-package-json\",\n      \"git add\"\n    ]\n  }\n}\n```\n\n## PFAQ: Potential Frequently Asked Questions\n\n### How does it sort?\n\nIt sorts using [`sort-object-keys`](http://github.com/keithamus/sort-object-keys). It sorts using the well-known keys of a package.json. For the full list it's just easier to [read the code](./index.js). It sorts sub-keys too - sometimes by a well-known order, other times alphabetically. The initial order was derived from the [package.json docs](https://docs.npmjs.com/files/package.json) with a few extras added for good measure.\n\n### It doesn't sort X?\n\nCool. Send a PR! It might get denied if it is a specific vendor key of an unpopular project (e.g. `\"my-super-unknown-project\"`). We sort keys like \"browserify\" because it is a project with millions of users. If your project has, say, over 100 users, then we'll add it. Sound fair?\n\n### Isn't this just like Project X?\n\nCould be. I wanted this one because at the time of writing, nothing is:\n\n- Zero config\n- Able to be used in a library\n- Quiet (i.e. not spitting out annoying log messages, when used in a library mode)\n\n### What?! Why would you want to do this?!\n\nWell, it's nice to have the keys of a package.json in a well sorted order. Almost everyone would agree having \"name\" at the top of a package.json is sensible (rather than sorted alphabetically or somewhere silly like the bottom), so why not the rest of the package.json?\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/sort-package-json/-/sort-package-json-1.44.0.tgz#470330be868f8a524a4607b26f2a0233e93d8b6d",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/sort-package-json/-/sort-package-json-1.44.0.tgz",
    "hash": "470330be868f8a524a4607b26f2a0233e93d8b6d",
    "integrity": "sha512-u9GUZvpavUCXV5SbEqXu9FRbsJrYU6WM10r3zA0gymGPufK5X82MblCLh9GW9l46pXKEZvK+FA3eVTqC4oMp4A==",
    "registry": "npm",
    "packageName": "sort-package-json",
    "cacheIntegrity": "sha512-u9GUZvpavUCXV5SbEqXu9FRbsJrYU6WM10r3zA0gymGPufK5X82MblCLh9GW9l46pXKEZvK+FA3eVTqC4oMp4A== sha1-RwMwvoaPilJKRgeybyoCM+k9i20="
  },
  "registry": "npm",
  "hash": "470330be868f8a524a4607b26f2a0233e93d8b6d"
}