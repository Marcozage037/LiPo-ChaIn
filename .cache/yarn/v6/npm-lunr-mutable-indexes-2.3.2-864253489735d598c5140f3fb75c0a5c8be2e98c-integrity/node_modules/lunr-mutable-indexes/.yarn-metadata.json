{
  "manifest": {
    "name": "lunr-mutable-indexes",
    "version": "2.3.2",
    "description": "Mutable indexes for lunr.js 2.x or greater",
    "main": "lunr-mutable.js",
    "scripts": {
      "test": "make test",
      "prepare": "make lunr-mutable.js",
      "prepublishOnly": "bash prepublish.sh"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/hoelzro/lunr-mutable-indexes.git"
    },
    "keywords": [
      "search",
      "lunr"
    ],
    "author": {
      "name": "Rob Hoelz"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/hoelzro/lunr-mutable-indexes/issues"
    },
    "devDependencies": {
      "chai": "^4.1.2",
      "mocha": "^5.1.1"
    },
    "homepage": "https://github.com/hoelzro/lunr-mutable-indexes#readme",
    "dependencies": {
      "lunr": ">= 2.3.0 < 2.4.0"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-lunr-mutable-indexes-2.3.2-864253489735d598c5140f3fb75c0a5c8be2e98c-integrity/node_modules/lunr-mutable-indexes/package.json",
    "readmeFilename": "README.md",
    "readme": "# Lunr Mutable Indexes - Mutable indexes for lunr.js 2.1.x\n\nWith the release of [lunr.js 2.0](https://github.com/olivernn/lunr.js), lunr\nremoved the ability to update existing indexes with new data.  While the space\nbenefits of this change are nice, some users need the flexibility of updating\ntheir indexes with new data.  That's what this library is for.\n\n# Example\n\nA simple search index can be created with the familiar `lunr` syntax; just substitute `lunr-mutable` for `lunr`.\n\n```js\n\nvar lunrMutable = require('lunr-mutable-indexes');\n\nvar index = lunrMutable(function () {\n  this.field('title')\n  this.field('body')\n\n  this.add({\n    \"title\": \"Twelfth-Night\",\n    \"body\": \"If music be the food of love, play on: Give me excess of itâ€¦\",\n    \"author\": \"William Shakespeare\",\n    \"id\": \"1\"\n  })\n})\n```\n\nNow, with a mutable index, we can add...\n\n```js\nindex.add({\n    \"title\": \"Merchant of Venice\",\n    \"body\": \"You speak an infinite deal of nothing.\",\n    \"author\": \"William Shakespeare\",\n    \"id\": \"2\"\n});\n```\n\nRemove...\n\n```js\nindex.remove({ id: \"1\" });\n```\n\nOr update existing documents.\n\n```js\nindex.update({\n    \"body\": \"With mirth and laughter let old wrinkles come.\",\n    \"id\": \"2\"\n});\n```\n\nIndex serialization also works, with the Index namespace accessible through the `lunr-mutable-indexes` object.\n\n```js\n// Serialize an index:\nvar serialized = JSON.stringify(index);\n\n// ...and deserialize it later:\nvar sameIndex = lunrMutable.Index.load(JSON.parse(serialized));\n```\n\n# Caveats\n\nThe main tradeoffs with `lunr-mutable-index` were originally discussed in [this PR](https://github.com/olivernn/lunr.js/pull/315) in `lunr`.\n* Mutable indexes work by having a handle to their original builder - this inflates the index size a bit.\n* Changing a builder's tokenizer won't persist across serialization boundaries.\n* Gaps in builder.termIndex may build up when documents are deleted.\n* The index is completely rebuilt when a document is added/updated/removed\n\nWork is ongoing to make improvements with these potential drawbacks, but please feel free to contribute fixes!\n\n# Thanks\n\nI wrote a simple extension to lunr.js - I would like to thank the following people for helping to make my life easier:\n\n  * Oliver Nightingale (@olivernn) for writing lunr.js in the first place!\n  * John Kupko (@k00p) for making the library easier to use and helping with some of the NPM plumbing!\n",
    "licenseText": "MIT License\n\nCopyright (c) 2018 Rob Hoelz\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/lunr-mutable-indexes/-/lunr-mutable-indexes-2.3.2.tgz#864253489735d598c5140f3fb75c0a5c8be2e98c",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/lunr-mutable-indexes/-/lunr-mutable-indexes-2.3.2.tgz",
    "hash": "864253489735d598c5140f3fb75c0a5c8be2e98c",
    "integrity": "sha512-Han6cdWAPPFM7C2AigS2Ofl3XjAT0yVMrUixodJEpyg71zCtZ2yzXc3s+suc/OaNt4ca6WJBEzVnEIjxCTwFMw==",
    "registry": "npm",
    "packageName": "lunr-mutable-indexes",
    "cacheIntegrity": "sha512-Han6cdWAPPFM7C2AigS2Ofl3XjAT0yVMrUixodJEpyg71zCtZ2yzXc3s+suc/OaNt4ca6WJBEzVnEIjxCTwFMw== sha1-hkJTSJc11ZjFFA8/t1wKXIvi6Yw="
  },
  "registry": "npm",
  "hash": "864253489735d598c5140f3fb75c0a5c8be2e98c"
}