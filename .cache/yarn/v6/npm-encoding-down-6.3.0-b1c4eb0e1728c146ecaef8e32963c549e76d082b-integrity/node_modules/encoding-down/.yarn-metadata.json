{
  "manifest": {
    "name": "encoding-down",
    "version": "6.3.0",
    "description": "LevelDOWN wrapper supporting levelup@1 encodings",
    "license": "MIT",
    "main": "index.js",
    "scripts": {
      "test": "standard && hallmark && nyc node test",
      "coverage": "nyc report --reporter=text-lcov | coveralls",
      "hallmark": "hallmark --fix",
      "dependency-check": "dependency-check . test/*.js",
      "prepublishOnly": "npm run dependency-check"
    },
    "dependencies": {
      "abstract-leveldown": "^6.2.1",
      "inherits": "^2.0.3",
      "level-codec": "^9.0.0",
      "level-errors": "^2.0.0"
    },
    "devDependencies": {
      "coveralls": "^3.0.2",
      "dependency-check": "^3.3.0",
      "hallmark": "^2.0.0",
      "level-community": "^3.0.0",
      "memdown": "^5.0.0",
      "nyc": "^14.0.0",
      "safe-buffer": "^5.1.1",
      "standard": "^14.0.0",
      "tape": "^4.8.0"
    },
    "hallmark": {
      "community": "level-community"
    },
    "repository": {
      "type": "git",
      "url": "https://github.com/Level/encoding-down.git"
    },
    "homepage": "https://github.com/Level/encoding-down",
    "keywords": [
      "level"
    ],
    "engines": {
      "node": ">=6"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-encoding-down-6.3.0-b1c4eb0e1728c146ecaef8e32963c549e76d082b-integrity/node_modules/encoding-down/package.json",
    "readmeFilename": "README.md",
    "readme": "# encoding-down\n\n> An [`abstract-leveldown`][abstract-leveldown] implementation that wraps another store to encode keys and values.\n\n[![level badge][level-badge]](https://github.com/Level/awesome)\n[![npm](https://img.shields.io/npm/v/encoding-down.svg?label=&logo=npm)](https://www.npmjs.com/package/encoding-down)\n[![Node version](https://img.shields.io/node/v/encoding-down.svg)](https://www.npmjs.com/package/encoding-down)\n[![Travis](https://img.shields.io/travis/Level/com/encoding-down.svg?logo=travis&label=)](https://travis-ci.com/Level/encoding-down)\n[![Coverage Status](https://coveralls.io/repos/github/Level/encoding-down/badge.svg)](https://coveralls.io/github/Level/encoding-down)\n[![JavaScript Style Guide](https://img.shields.io/badge/code_style-standard-brightgreen.svg)](https://standardjs.com)\n[![npm](https://img.shields.io/npm/dm/encoding-down.svg?label=dl)](https://www.npmjs.com/package/encoding-down)\n[![Backers on Open Collective](https://opencollective.com/level/backers/badge.svg?color=orange)](#backers)\n[![Sponsors on Open Collective](https://opencollective.com/level/sponsors/badge.svg?color=orange)](#sponsors)\n\n## Introduction\n\nStores like [`leveldown`][leveldown] can only store strings and Buffers. Other types, though accepted, are [_serialized_](https://github.com/Level/abstract-leveldown#db_serializekeykey) before storage, which is an irreversible type conversion. For a richer set of data types you can wrap such a store with `encoding-down`. It allows you to specify an _encoding_ to use for keys and values independently. This not only widens the range of input types, but also limits the range of output types. The encoding is applied to all read and write operations: it encodes writes and decodes reads.\n\n[Many encodings are builtin][builtin-encodings] courtesy of [`level-codec`][level-codec]. The default encoding is `utf8` which ensures you'll always get back a string. You can also provide a custom encoding like `bytewise` - [or your own](#custom-encodings)!\n\n## Usage\n\nWithout any options, `encoding-down` defaults to the `utf8` encoding.\n\n```js\nvar levelup = require('levelup')\nvar leveldown = require('leveldown')\nvar encode = require('encoding-down')\n\nvar db = levelup(encode(leveldown('./db1')))\n\ndb.put('example', Buffer.from('encoding-down'), function (err) {\n  db.get('example', function (err, value) {\n    console.log(typeof value, value) // 'string encoding-down'\n  })\n})\n```\n\nCan we store objects? Yes!\n\n```js\nvar db = levelup(encode(leveldown('./db2'), { valueEncoding: 'json' }))\n\ndb.put('example', { awesome: true }, function (err) {\n  db.get('example', function (err, value) {\n    console.log(value) // { awesome: true }\n    console.log(typeof value) // 'object'\n  })\n})\n```\n\nHow about storing Buffers, but getting back a hex-encoded string?\n\n```js\nvar db = levelup(encode(leveldown('./db3'), { valueEncoding: 'hex' }))\n\ndb.put('example', Buffer.from([0, 255]), function (err) {\n  db.get('example', function (err, value) {\n    console.log(typeof value, value) // 'string 00ff'\n  })\n})\n```\n\nWhat if we previously stored binary data?\n\n```js\nvar db = levelup(encode(leveldown('./db4'), { valueEncoding: 'binary' }))\n\ndb.put('example', Buffer.from([0, 255]), function (err) {\n  db.get('example', function (err, value) {\n    console.log(typeof value, value) // 'object <Buffer 00 ff>'\n  })\n\n  // Override the encoding for this operation\n  db.get('example', { valueEncoding: 'base64' }, function (err, value) {\n    console.log(typeof value, value) // 'string AP8='\n  })\n})\n```\n\nAnd what about keys?\n\n```js\nvar db = levelup(encode(leveldown('./db5'), { keyEncoding: 'json' }))\n\ndb.put({ awesome: true }, 'example', function (err) {\n  db.get({ awesome: true }, function (err, value) {\n    console.log(value) // 'example'\n  })\n})\n```\n\n```js\nvar db = levelup(encode(leveldown('./db6'), { keyEncoding: 'binary' }))\n\ndb.put(Buffer.from([0, 255]), 'example', function (err) {\n  db.get('00ff', { keyEncoding: 'hex' }, function (err, value) {\n    console.log(value) // 'example'\n  })\n})\n```\n\n## Usage with [`level`][level]\n\nThe [`level`][level] module conveniently bundles `encoding-down` and passes its `options` to `encoding-down`. This means you can simply do:\n\n```js\nvar level = require('level')\nvar db = level('./db7', { valueEncoding: 'json' })\n\ndb.put('example', 42, function (err) {\n  db.get('example', function (err, value) {\n    console.log(value) // 42\n    console.log(typeof value) // 'number'\n  })\n})\n```\n\n## API\n\n### `db = require('encoding-down')(db[, options])`\n\n- `db` must be an [`abstract-leveldown`][abstract-leveldown] compliant store\n- `options` are passed to [`level-codec`][level-codec]:\n  - `keyEncoding`: encoding to use for keys\n  - `valueEncoding`: encoding to use for values\n\nBoth encodings default to `'utf8'`. They can be a string (builtin `level-codec` encoding) or an object (custom encoding).\n\n## Custom encodings\n\nPlease refer to [`level-codec` documentation][encoding-format] for a precise description of the format. Here's a quick example with `level` and `async/await` just for fun:\n\n```js\nvar level = require('level')\nvar lexint = require('lexicographic-integer')\n\nasync function main () {\n  var db = level('./db8', {\n    keyEncoding: {\n      type: 'lexicographic-integer',\n      encode: (n) => lexint.pack(n, 'hex'),\n      decode: lexint.unpack,\n      buffer: false\n    }\n  })\n\n  await db.put(2, 'example')\n  await db.put(10, 'example')\n\n  // Without our encoding, the keys would sort as 10, 2.\n  db.createKeyStream().on('data', console.log) // 2, 10\n}\n\nmain()\n```\n\nWith an npm-installed encoding (modularity ftw!) we can reduce the above to:\n\n```js\nvar level = require('level')\nvar lexint = require('lexicographic-integer-encoding')('hex')\n\nvar db = level('./db8', {\n  keyEncoding: lexint\n})\n```\n\n## Contributing\n\n[`Level/encoding-down`](https://github.com/Level/encoding-down) is an **OPEN Open Source Project**. This means that:\n\n> Individuals making significant and valuable contributions are given commit-access to the project to contribute as they see fit. This project is more like an open wiki than a standard guarded open source project.\n\nSee the [Contribution Guide](https://github.com/Level/community/blob/master/CONTRIBUTING.md) for more details.\n\n## Donate\n\nTo sustain [`Level`](https://github.com/Level) and its activities, become a backer or sponsor on [Open Collective](https://opencollective.com/level). Your logo or avatar will be displayed on our 28+ [GitHub repositories](https://github.com/Level) and [npm](https://www.npmjs.com/) packages. ðŸ’–\n\n### Backers\n\n[![Open Collective backers](https://opencollective.com/level/backers.svg?width=890)](https://opencollective.com/level)\n\n### Sponsors\n\n[![Open Collective sponsors](https://opencollective.com/level/sponsors.svg?width=890)](https://opencollective.com/level)\n\n## License\n\n[MIT](LICENSE.md) Â© 2012-present [Contributors](CONTRIBUTORS.md).\n\n[level-badge]: https://leveljs.org/img/badge.svg\n\n[abstract-leveldown]: https://github.com/Level/abstract-leveldown\n\n[leveldown]: https://github.com/Level/leveldown\n\n[level]: https://github.com/Level/level\n\n[level-codec]: https://github.com/Level/codec\n\n[builtin-encodings]: https://github.com/Level/codec#builtin-encodings\n\n[encoding-format]: https://github.com/Level/codec#encoding-format\n",
    "licenseText": "# The MIT License (MIT)\n\n**Copyright Â© 2012-present [Contributors](CONTRIBUTORS.md).**\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/encoding-down/-/encoding-down-6.3.0.tgz#b1c4eb0e1728c146ecaef8e32963c549e76d082b",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/encoding-down/-/encoding-down-6.3.0.tgz",
    "hash": "b1c4eb0e1728c146ecaef8e32963c549e76d082b",
    "integrity": "sha512-QKrV0iKR6MZVJV08QY0wp1e7vF6QbhnbQhb07bwpEyuz4uZiZgPlEGdkCROuFkUwdxlFaiPIhjyarH1ee/3vhw==",
    "registry": "npm",
    "packageName": "encoding-down",
    "cacheIntegrity": "sha512-QKrV0iKR6MZVJV08QY0wp1e7vF6QbhnbQhb07bwpEyuz4uZiZgPlEGdkCROuFkUwdxlFaiPIhjyarH1ee/3vhw== sha1-scTrDhcowUbsrvjjKWPFSedtCCs="
  },
  "registry": "npm",
  "hash": "b1c4eb0e1728c146ecaef8e32963c549e76d082b"
}