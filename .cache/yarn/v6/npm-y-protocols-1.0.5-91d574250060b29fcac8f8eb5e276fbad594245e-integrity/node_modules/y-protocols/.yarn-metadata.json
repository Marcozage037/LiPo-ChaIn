{
  "manifest": {
    "name": "y-protocols",
    "version": "1.0.5",
    "description": "Yjs encoding protocols",
    "type": "module",
    "funding": {
      "type": "GitHub Sponsors ❤",
      "url": "https://github.com/sponsors/dmonad"
    },
    "files": [
      "dist/*",
      "auth.*",
      "sync.*",
      "awareness.*"
    ],
    "scripts": {
      "clean": "rm -rf dist *.d.ts */*.d.ts *.d.ts.map */*.d.ts.map",
      "dist": "rm -rf dist && rollup -c",
      "test": "npm run lint && npm run dist && node dist/test.cjs",
      "lint": "standard && tsc",
      "types": "tsc --outDir .",
      "debug": "rollup -c && concurrently 'rollup -wc' 'http-server -o test.html'",
      "preversion": "npm run dist && npm run test && npm run types",
      "postpublish": "npm run clean"
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/yjs/y-protocols.git"
    },
    "keywords": [
      "Yjs"
    ],
    "author": {
      "name": "Kevin Jahns",
      "email": "kevin.jahns@protonmail.com"
    },
    "license": "MIT",
    "standard": {
      "ignore": [
        "/dist",
        "/node_modules"
      ]
    },
    "bugs": {
      "url": "https://github.com/yjs/y-protocols/issues"
    },
    "homepage": "https://github.com/yjs/y-protocols#readme",
    "exports": {
      "./package.json": "./package.json",
      "./sync.js": "./sync.js",
      "./dist/sync.cjs": "./dist/sync.cjs",
      "./sync": {
        "import": "./sync.js",
        "require": "./dist/sync.cjs"
      },
      "./awareness.js": "./awareness.js",
      "./dist/awareness.cjs": "./dist/awareness.cjs",
      "./awareness": {
        "import": "./awareness.js",
        "require": "./dist/awareness.cjs"
      },
      "./auth.js": "./auth.js",
      "./dist/auth.cjs": "./dist/auth.cjs",
      "./auth": {
        "import": "./auth.js",
        "require": "./dist/auth.cjs"
      }
    },
    "dependencies": {
      "lib0": "^0.2.42"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^17.1.0",
      "@rollup/plugin-node-resolve": "^11.2.1",
      "concurrently": "^5.3.0",
      "rollup": "^2.48.0",
      "standard": "^12.0.1",
      "typescript": "^4.2.4",
      "yjs": "^13.5.6"
    },
    "peerDependenies": {
      "yjs": "^13.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-y-protocols-1.0.5-91d574250060b29fcac8f8eb5e276fbad594245e-integrity/node_modules/y-protocols/package.json",
    "readmeFilename": "README.md",
    "readme": "# Yjs Protocols\n> Binary encoding protocols for *syncing*, *awareness*, and *history inforamtion*\n\nThis API is unstable and subject to change.\n\n## API\n\n### Awareness Protocol\n\n```js\nimport * as awarenessProtocol from 'y-protocols/awareness.js'\n```\n\nThe Awareness protocol implements a simple network agnostic algorithm that\nmanages user status (who is online?) and propagate awareness information like\ncursor location, username, or email address. Each client can update its own\nlocal state and listen to state changes of remote clients.\n\nEach client has an awareness state. Remote awareness are stored in a Map that\nmaps from remote client id to remote awareness state. An *awareness state* is an\nincreasing clock attached to a schemaless json object.\n\nWhenever the client changes its local state, it increases the clock and\npropagates its own awareness state to all peers. When a client receives a remote\nawareness state, and overwrites the clients state if the received state is newer\nthan the local awareness state for that client. If the state is `null`, the\nclient is marked as offline. If a client doesn't receive updates from a remote\npeer for 30 seconds, it marks the remote client as offline. Hence each client\nmust broadcast its own awareness state in a regular interval to make sure that\nremote clients don't mark it as offline.\n\n#### awarenessProtocol.Awareness Class\n\n```js\nconst awareness = new awarenessProtocol.Awareness()\n```\n\n<dl>\n  <b><code>clientID:number</code></b>\n  <dd>A unique identifier that identifies this client.</dd>\n  <b><code>getLocalState():Object&lt;string,any&gt;|null</code></b>\n  <dd>Get the local awareness state.</dd>\n  <b><code>setLocalState(Object&lt;string,any&gt;|null)</code></b>\n  <dd>\nSet/Update the local awareness state. Set `null` to mark the local client as\noffline.\n  </dd>\n  <b><code>setLocalStateField(string, any)</code></b>\n  <dd>\nOnly update a single field on the local awareness object. Does not do\nanything if the local state is not set.\n  </dd>\n  <b><code>getStates():Map&lt;number,Object&lt;string,any&gt;&gt;</code></b>\n  <dd>\nGet all client awareness states (remote and local). Maps from clientID to\nawareness state.\n  </dd>\n  <b><code>\non('change', ({ added: Array&lt;number&gt;, updated: Array&lt;number&gt;\nremoved: Array&lt;number&gt; }, [transactionOrigin:any]) => ..)\n  </code></b>\n  <dd>\nListen to remote and local state changes on the awareness instance.\n  </dd>\n  <b><code>\non('update', ({ added: Array&lt;number&gt;, updated: Array&lt;number&gt;\nremoved: Array&lt;number&gt; }, [transactionOrigin:any]) => ..)\n  </code></b>\n  <dd>\nListen to remote and local awareness changes on the awareness instance.\nThis event is called even when the awarenes state does not change.\n  </dd>\n</dl>\n\n### License\n\n[The MIT License](./LICENSE) © Kevin Jahns\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Kevin Jahns <kevin.jahns@protonmail.com>.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/y-protocols/-/y-protocols-1.0.5.tgz#91d574250060b29fcac8f8eb5e276fbad594245e",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/y-protocols/-/y-protocols-1.0.5.tgz",
    "hash": "91d574250060b29fcac8f8eb5e276fbad594245e",
    "integrity": "sha512-Wil92b7cGk712lRHDqS4T90IczF6RkcvCwAD0A2OPg+adKmOe+nOiT/N2hvpQIWS3zfjmtL4CPaH5sIW1Hkm/A==",
    "registry": "npm",
    "packageName": "y-protocols",
    "cacheIntegrity": "sha512-Wil92b7cGk712lRHDqS4T90IczF6RkcvCwAD0A2OPg+adKmOe+nOiT/N2hvpQIWS3zfjmtL4CPaH5sIW1Hkm/A== sha1-kdV0JQBgsp/KyPjrXidvutWUJF4="
  },
  "registry": "npm",
  "hash": "91d574250060b29fcac8f8eb5e276fbad594245e"
}