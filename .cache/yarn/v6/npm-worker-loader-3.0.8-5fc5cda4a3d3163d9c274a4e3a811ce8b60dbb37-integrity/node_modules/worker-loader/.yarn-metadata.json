{
  "manifest": {
    "name": "worker-loader",
    "version": "3.0.8",
    "description": "worker loader module for webpack",
    "license": "MIT",
    "repository": {
      "type": "git",
      "url": "https://github.com/webpack-contrib/worker-loader.git"
    },
    "author": {
      "name": "Tobias Koppers @sokra"
    },
    "homepage": "https://github.com/webpack-contrib/worker-loader",
    "bugs": {
      "url": "https://github.com/webpack-contrib/worker-loader/issues"
    },
    "funding": {
      "type": "opencollective",
      "url": "https://opencollective.com/webpack"
    },
    "main": "dist/cjs.js",
    "engines": {
      "node": ">= 10.13.0"
    },
    "scripts": {
      "start": "npm run build -- -w",
      "clean": "del-cli dist",
      "prebuild": "npm run clean",
      "build": "cross-env NODE_ENV=production babel src -d dist --copy-files",
      "commitlint": "commitlint --from=master",
      "security": "npm audit",
      "lint:prettier": "prettier --list-different .",
      "lint:js": "eslint --cache .",
      "lint": "npm-run-all -l -p \"lint:**\"",
      "test:only": "cross-env NODE_ENV=test jest",
      "test:watch": "npm run test:only -- --watch",
      "test:coverage": "npm run test:only -- --collectCoverageFrom=\"src/**/*.js\" --coverage",
      "pretest": "npm run lint",
      "test": "npm run test:coverage",
      "prepare": "npm run build",
      "release": "standard-version"
    },
    "files": [
      "dist"
    ],
    "peerDependencies": {
      "webpack": "^4.0.0 || ^5.0.0"
    },
    "dependencies": {
      "loader-utils": "^2.0.0",
      "schema-utils": "^3.0.0"
    },
    "devDependencies": {
      "@babel/cli": "^7.12.13",
      "@babel/core": "^7.12.13",
      "@babel/preset-env": "^7.12.13",
      "@commitlint/cli": "^11.0.0",
      "@commitlint/config-conventional": "^11.0.0",
      "@webpack-contrib/eslint-config-webpack": "^3.0.0",
      "babel-jest": "^26.6.3",
      "cross-env": "^7.0.3",
      "del": "^6.0.0",
      "del-cli": "^3.0.1",
      "eslint": "^7.19.0",
      "eslint-config-prettier": "^7.2.0",
      "eslint-plugin-import": "^2.22.1",
      "express": "^4.17.1",
      "get-port": "^5.1.1",
      "html-webpack-plugin": "^4.5.0",
      "husky": "^4.3.0",
      "jest": "^26.6.3",
      "lint-staged": "^10.5.4",
      "memfs": "^3.2.0",
      "nanoid": "^3.1.20",
      "npm-run-all": "^4.1.5",
      "prettier": "^2.2.1",
      "puppeteer": "^7.0.4",
      "standard-version": "^9.1.0",
      "webpack": "^5.21.2"
    },
    "keywords": [
      "webpack"
    ],
    "jest": {
      "testEnvironment": "node"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-worker-loader-3.0.8-5fc5cda4a3d3163d9c274a4e3a811ce8b60dbb37-integrity/node_modules/worker-loader/package.json",
    "readmeFilename": "README.md",
    "readme": "<div align=\"center\">\n  <a href=\"https://github.com/webpack/webpack\">\n    <img width=\"200\" height=\"200\" src=\"https://webpack.js.org/assets/icon-square-big.svg\">\n  </a>\n</div>\n\n[![npm][npm]][npm-url]\n[![node][node]][node-url]\n[![deps][deps]][deps-url]\n[![tests][tests]][tests-url]\n[![coverage][cover]][cover-url]\n[![chat][chat]][chat-url]\n[![size][size]][size-url]\n\n# worker-loader\n\nworker loader module for webpack\n\n## Getting Started\n\nTo begin, you'll need to install `worker-loader`:\n\n```console\n$ npm install worker-loader --save-dev\n```\n\n### Inlined\n\n**App.js**\n\n```js\nimport Worker from \"worker-loader!./Worker.js\";\n```\n\n### Config\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.js$/,\n        use: { loader: \"worker-loader\" },\n      },\n    ],\n  },\n};\n```\n\n**App.js**\n\n```js\nimport Worker from \"./file.worker.js\";\n\nconst worker = new Worker();\n\nworker.postMessage({ a: 1 });\nworker.onmessage = function (event) {};\n\nworker.addEventListener(\"message\", function (event) {});\n```\n\nAnd run `webpack` via your preferred method.\n\n## Options\n\n|                 Name                  |            Type             |             Default             | Description                                                                       |\n| :-----------------------------------: | :-------------------------: | :-----------------------------: | :-------------------------------------------------------------------------------- |\n|        **[`worker`](#worker)**        |     `{String\\|Object}`      |            `Worker`             | Allows to set web worker constructor name and options                             |\n|    **[`publicPath`](#publicpath)**    |    `{String\\|Function}`     |  based on `output.publicPath`   | specifies the public URL address of the output files when referenced in a browser |\n|      **[`filename`](#filename)**      |    `{String\\|Function}`     |   based on `output.filename`    | The filename of entry chunks for web workers                                      |\n| **[`chunkFilename`](#chunkfilename)** |         `{String}`          | based on `output.chunkFilename` | The filename of non-entry chunks for web workers                                  |\n|        **[`inline`](#inline)**        | `'no-fallback'\\|'fallback'` |           `undefined`           | Allow to inline the worker as a `BLOB`                                            |\n|      **[`esModule`](#esmodule)**      |         `{Boolean}`         |             `true`              | Use ES modules syntax                                                             |\n\n### `worker`\n\nType: `String|Object`\nDefault: `Worker`\n\nSet the worker type.\n\n#### `String`\n\nAllows to set web worker constructor name.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          worker: \"SharedWorker\",\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Object`\n\nAllow to set web worker constructor name and options.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          worker: {\n            type: \"SharedWorker\",\n            options: {\n              type: \"classic\",\n              credentials: \"omit\",\n              name: \"my-custom-worker-name\",\n            },\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `publicPath`\n\nType: `String|Function`\nDefault: based on `output.publicPath`\n\nThe `publicPath` specifies the public URL address of the output files when referenced in a browser.\nIf not specified, the same public path used for other webpack assets is used.\n\n#### `String`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          publicPath: \"/scripts/workers/\",\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          publicPath: (pathData, assetInfo) => {\n            return `/scripts/${pathData.hash}/workers/`;\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `filename`\n\nType: `String|Function`\nDefault: based on `output.filename`, adding `worker` suffix, for example - `output.filename: '[name].js'` value of this option will be `[name].worker.js`\n\nThe filename of entry chunks for web workers.\n\n#### `String`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          filename: \"[name].[contenthash].worker.js\",\n        },\n      },\n    ],\n  },\n};\n```\n\n#### `Function`\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          filename: (pathData) => {\n            if (\n              /\\.worker\\.(c|m)?js$/i.test(pathData.chunk.entryModule.resource)\n            ) {\n              return \"[name].custom.worker.js\";\n            }\n\n            return \"[name].js\";\n          },\n        },\n      },\n    ],\n  },\n};\n```\n\n### `chunkFilename`\n\nType: `String`\nDefault: based on `output.chunkFilename`, adding `worker` suffix, for example - `output.chunkFilename: '[id].js'` value of this option will be `[id].worker.js`\n\nThe filename of non-entry chunks for web workers.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          chunkFilename: \"[id].[contenthash].worker.js\",\n        },\n      },\n    ],\n  },\n};\n```\n\n### `inline`\n\nType: `'fallback' | 'no-fallback'`\nDefault: `undefined`\n\nAllow to inline the worker as a `BLOB`.\n\nInline mode with the `fallback` value will create file for browsers without support web workers, to disable this behavior just use `no-fallback` value.\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          inline: \"fallback\",\n        },\n      },\n    ],\n  },\n};\n```\n\n### `esModule`\n\nType: `Boolean`\nDefault: `true`\n\nBy default, `worker-loader` generates JS modules that use the ES modules syntax.\n\nYou can enable a CommonJS modules syntax using:\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          esModule: false,\n        },\n      },\n    ],\n  },\n};\n```\n\n## Examples\n\n### Basic\n\nThe worker file can import dependencies just like any other file:\n\n**index.js**\n\n```js\nimport Worker from \"./my.worker.js\";\n\nvar worker = new Worker();\n\nvar result;\n\nworker.onmessage = function (event) {\n  if (!result) {\n    result = document.createElement(\"div\");\n    result.setAttribute(\"id\", \"result\");\n\n    document.body.append(result);\n  }\n\n  result.innerText = JSON.stringify(event.data);\n};\n\nconst button = document.getElementById(\"button\");\n\nbutton.addEventListener(\"click\", function () {\n  worker.postMessage({ postMessage: true });\n});\n```\n\n**my.worker.js**\n\n```js\nonmessage = function (event) {\n  var workerResult = event.data;\n\n  workerResult.onmessage = true;\n\n  postMessage(workerResult);\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        loader: \"worker-loader\",\n        options: {\n          esModule: false,\n        },\n      },\n    ],\n  },\n};\n```\n\n### Integrating with ES6+ features\n\nYou can even use ES6+ features if you have the [`babel-loader`](https://github.com/babel/babel-loader) configured.\n\n**index.js**\n\n```js\nimport Worker from \"./my.worker.js\";\n\nconst worker = new Worker();\n\nlet result;\n\nworker.onmessage = (event) => {\n  if (!result) {\n    result = document.createElement(\"div\");\n    result.setAttribute(\"id\", \"result\");\n\n    document.body.append(result);\n  }\n\n  result.innerText = JSON.stringify(event.data);\n};\n\nconst button = document.getElementById(\"button\");\n\nbutton.addEventListener(\"click\", () => {\n  worker.postMessage({ postMessage: true });\n});\n```\n\n**my.worker.js**\n\n```js\nonmessage = function (event) {\n  const workerResult = event.data;\n\n  workerResult.onmessage = true;\n\n  postMessage(workerResult);\n};\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        test: /\\.worker\\.(c|m)?js$/i,\n        use: [\n          {\n            loader: \"worker-loader\",\n          },\n          {\n            loader: \"babel-loader\",\n            options: {\n              presets: [\"@babel/preset-env\"],\n            },\n          },\n        ],\n      },\n    ],\n  },\n};\n```\n\n### Integrating with TypeScript\n\nTo integrate with TypeScript, you will need to define a custom module for the exports of your worker.\n\n**typings/worker-loader.d.ts**\n\n```typescript\ndeclare module \"worker-loader!*\" {\n  // You need to change `Worker`, if you specified a different value for the `workerType` option\n  class WebpackWorker extends Worker {\n    constructor();\n  }\n\n  // Uncomment this if you set the `esModule` option to `false`\n  // export = WebpackWorker;\n  export default WebpackWorker;\n}\n```\n\n**my.worker.ts**\n\n```typescript\nconst ctx: Worker = self as any;\n\n// Post data to parent thread\nctx.postMessage({ foo: \"foo\" });\n\n// Respond to message from parent thread\nctx.addEventListener(\"message\", (event) => console.log(event));\n```\n\n**index.ts**\n\n```typescript\nimport Worker from \"worker-loader!./Worker\";\n\nconst worker = new Worker();\n\nworker.postMessage({ a: 1 });\nworker.onmessage = (event) => {};\n\nworker.addEventListener(\"message\", (event) => {});\n```\n\n### Cross-Origin Policy\n\n[`WebWorkers`](https://developer.mozilla.org/en-US/docs/Web/API/Web_Workers_API) are restricted by a [same-origin policy](https://en.wikipedia.org/wiki/Same-origin_policy), so if your `webpack` assets are not being served from the same origin as your application, their download may be blocked by your browser.\nThis scenario can commonly occur if you are hosting your assets under a CDN domain.\nEven downloads from the `webpack-dev-server` could be blocked.\n\nThere are two workarounds:\n\nFirstly, you can inline the worker as a blob instead of downloading it as an external script via the [`inline`](#inline) parameter\n\n**App.js**\n\n```js\nimport Worker from \"./file.worker.js\";\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        loader: \"worker-loader\",\n        options: { inline: \"fallback\" },\n      },\n    ],\n  },\n};\n```\n\nSecondly, you may override the base download URL for your worker script via the [`publicPath`](#publicpath) option\n\n**App.js**\n\n```js\n// This will cause the worker to be downloaded from `/workers/file.worker.js`\nimport Worker from \"./file.worker.js\";\n```\n\n**webpack.config.js**\n\n```js\nmodule.exports = {\n  module: {\n    rules: [\n      {\n        loader: \"worker-loader\",\n        options: { publicPath: \"/workers/\" },\n      },\n    ],\n  },\n};\n```\n\n## Contributing\n\nPlease take a moment to read our contributing guidelines if you haven't yet done so.\n\n[CONTRIBUTING](./.github/CONTRIBUTING.md)\n\n## License\n\n[MIT](./LICENSE)\n\n[npm]: https://img.shields.io/npm/v/worker-loader.svg\n[npm-url]: https://npmjs.com/package/worker-loader\n[node]: https://img.shields.io/node/v/worker-loader.svg\n[node-url]: https://nodejs.org\n[deps]: https://david-dm.org/webpack-contrib/worker-loader.svg\n[deps-url]: https://david-dm.org/webpack-contrib/worker-loader\n[tests]: https://github.com/webpack-contrib/worker-loader/workflows/worker-loader/badge.svg\n[tests-url]: https://github.com/webpack-contrib/worker-loader/actions\n[cover]: https://codecov.io/gh/webpack-contrib/worker-loader/branch/master/graph/badge.svg\n[cover-url]: https://codecov.io/gh/webpack-contrib/worker-loader\n[chat]: https://badges.gitter.im/webpack/webpack.svg\n[chat-url]: https://gitter.im/webpack/webpack\n[size]: https://packagephobia.now.sh/badge?p=worker-loader\n[size-url]: https://packagephobia.now.sh/result?p=worker-loader\n",
    "licenseText": "Copyright JS Foundation and other contributors\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/worker-loader/-/worker-loader-3.0.8.tgz#5fc5cda4a3d3163d9c274a4e3a811ce8b60dbb37",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/worker-loader/-/worker-loader-3.0.8.tgz",
    "hash": "5fc5cda4a3d3163d9c274a4e3a811ce8b60dbb37",
    "integrity": "sha512-XQyQkIFeRVC7f7uRhFdNMe/iJOdO6zxAaR3EWbDp45v3mDhrTi+++oswKNxShUNjPC/1xUp5DB29YKLhFo129g==",
    "registry": "npm",
    "packageName": "worker-loader",
    "cacheIntegrity": "sha512-XQyQkIFeRVC7f7uRhFdNMe/iJOdO6zxAaR3EWbDp45v3mDhrTi+++oswKNxShUNjPC/1xUp5DB29YKLhFo129g== sha1-X8XNpKPTFj2cJ0pOOoEc6LYNuzc="
  },
  "registry": "npm",
  "hash": "5fc5cda4a3d3163d9c274a4e3a811ce8b60dbb37"
}