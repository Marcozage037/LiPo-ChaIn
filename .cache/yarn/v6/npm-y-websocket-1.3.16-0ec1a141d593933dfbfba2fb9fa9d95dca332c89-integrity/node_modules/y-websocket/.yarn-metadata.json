{
  "manifest": {
    "name": "y-websocket",
    "version": "1.3.16",
    "description": "Websockets provider for Yjs",
    "main": "./dist/y-websocket.cjs",
    "module": "./src/y-websocket.js",
    "types": "./dist/src/y-websocket.d.ts",
    "sideEffects": false,
    "funding": {
      "type": "GitHub Sponsors ❤",
      "url": "https://github.com/sponsors/dmonad"
    },
    "scripts": {
      "start": "node ./bin/server.js",
      "dist": "rm -rf dist && rollup -c && tsc",
      "lint": "standard && tsc",
      "test": "npm run lint",
      "preversion": "npm run lint && npm run dist && test -e dist/src/y-websocket.d.ts && test -e dist/y-websocket.cjs"
    },
    "bin": {
      "y-websocket-server": "bin/server.js"
    },
    "files": [
      "dist/*",
      "bin/*",
      "src/*"
    ],
    "exports": {
      "./package.json": "./package.json",
      ".": {
        "import": "./src/y-websocket.js",
        "require": "./dist/y-websocket.cjs"
      }
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/yjs/y-websocket.git"
    },
    "keywords": [
      "Yjs"
    ],
    "author": {
      "name": "Kevin Jahns",
      "email": "kevin.jahns@protonmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/yjs/y-websocket/issues"
    },
    "homepage": "https://github.com/yjs/y-websocket#readme",
    "standard": {
      "ignore": [
        "/dist",
        "/node_modules"
      ]
    },
    "dependencies": {
      "lib0": "^0.2.42",
      "lodash.debounce": "^4.0.8",
      "y-protocols": "^1.0.5"
    },
    "devDependencies": {
      "rollup": "^1.32.1",
      "rollup-cli": "^1.0.9",
      "standard": "^12.0.1",
      "typescript": "^3.9.9",
      "yjs": "^13.5.0"
    },
    "peerDependencies": {
      "yjs": "^13.5.6"
    },
    "optionalDependencies": {
      "ws": "^6.2.1",
      "y-leveldb": "^0.1.0"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-y-websocket-1.3.16-0ec1a141d593933dfbfba2fb9fa9d95dca332c89-integrity/node_modules/y-websocket/package.json",
    "readmeFilename": "README.md",
    "readme": "\n# y-websocket :tophat:\n> WebSocket Provider for Yjs\n\nThe Websocket Provider implements a classical client server model. Clients connect to a single endpoint over Websocket. The server distributes awareness information and document updates among clients.\n\nThe Websocket Provider is a solid choice if you want a central source that handles authentication and authorization. Websockets also send header information and cookies, so you can use existing authentication mechanisms with this server.\n\n* Supports cross-tab communication. When you open the same document in the same browser, changes on the document are exchanged via cross-tab communication ([Broadcast Channel](https://developer.mozilla.org/en-US/docs/Web/API/Broadcast_Channel_API) and [localStorage](https://developer.mozilla.org/en-US/docs/Web/API/Window/localStorage) as fallback).\n* Supports exchange of awareness information (e.g. cursors).\n\n## Quick Start\n\n### Install dependencies\n\n```sh\nnpm i y-websocket\n```\n\n### Start a y-websocket server\n\nThis repository implements a basic server that you can adopt to your specific use-case. [(source code)](./bin/)\n\nStart a y-websocket server:\n\n```sh\nHOST=localhost PORT=1234 npx y-websocket-server\n```\n\n### Client Code:\n\n```js\nimport * as Y from 'yjs'\nimport { WebsocketProvider } from 'y-websocket'\n\nconst doc = new Y.Doc()\nconst wsProvider = new WebsocketProvider('ws://localhost:1234', 'my-roomname', doc)\n\nwsProvider.on('status', event => {\n  console.log(event.status) // logs \"connected\" or \"disconnected\"\n})\n```\n\n#### Client Code in Node.js\n\nThe WebSocket provider requires a [`WebSocket`](https://developer.mozilla.org/en-US/docs/Web/API/WebSocket) object to create connection to a server. You can polyfill WebSocket support in Node.js using the [`ws` package](https://www.npmjs.com/package/ws).\n\n```js\nconst wsProvider = new WebsocketProvider('ws://localhost:1234', 'my-roomname', doc, { WebSocketPolyfill: require('ws') })\n```\n\n## API\n\n```js\nimport { WebsocketProvider } from 'y-websocket'\n```\n\n<dl>\n  <b><code>wsProvider = new WebsocketProvider(serverUrl: string, room: string, ydoc: Y.Doc [, wsOpts: WsOpts])</code></b>\n  <dd>Create a new websocket-provider instance. As long as this provider, or the connected ydoc, is not destroyed, the changes will be synced to other clients via the connected server. Optionally, you may specify a configuration object. The following default values of wsOpts can be overwritten. </dd>\n</dl>\n\n```js\nwsOpts = {\n  // Set this to `false` if you want to connect manually using wsProvider.connect()\n  connect: true,\n  // Specify a query-string that will be url-encoded and attached to the `serverUrl`\n  // I.e. params = { auth: \"bearer\" } will be transformed to \"?auth=bearer\"\n  params: {}, // Object<string,string>\n  // You may polyill the Websocket object (https://developer.mozilla.org/en-US/docs/Web/API/WebSocket).\n  // E.g. In nodejs, you could specify WebsocketPolyfill = require('ws')\n  WebsocketPolyfill: Websocket,\n  // Specify an existing Awareness instance - see https://github.com/yjs/y-protocols\n  awareness: new awarenessProtocol.Awareness(ydoc)\n}\n```\n\n<dl>\n  <b><code>wsProvider.wsconnected: boolean</code></b>\n  <dd>True if this instance is currently connected to the server.</dd>\n  <b><code>wsProvider.wsconnecting: boolean</code></b>\n  <dd>True if this instance is currently connecting to the server.</dd>\n  <b><code>wsProvider.shouldConnect: boolean</code></b>\n  <dd>If false, the client will not try to reconnect.</dd>\n  <b><code>wsProvider.bcconnected: boolean</code></b>\n  <dd>True if this instance is currently communicating to other browser-windows via BroadcastChannel.</dd>\n  <b><code>wsProvider.synced: boolean</code></b>\n  <dd>True if this instance is currently connected and synced with the server.</dd>\n  <b><code>wsProvider.disconnect()</code></b>\n  <dd>Disconnect from the server and don't try to reconnect.</dd>\n  <b><code>wsProvider.connect()</code></b>\n  <dd>Establish a websocket connection to the websocket-server. Call this if you recently disconnected or if you set wsOpts.connect = false.</dd>\n  <b><code>wsProvider.destroy()</code></b>\n  <dd>Destroy this wsProvider instance. Disconnects from the server and removes all event handlers.</dd>\n  <b><code>wsProvider.on('sync', function(isSynced: boolean))</code></b>\n  <dd>Add an event listener for the sync event that is fired when the client received content from the server.</dd>\n</dl>\n\n## Websocket Server\n\nStart a y-websocket server:\n\n```sh\nHOST=localhost PORT=1234 npx y-websocket-server\n```\n\nSince npm symlinks the `y-websocket-server` executable from your local `./node_modules/.bin` folder, you can simply run npx. The `PORT` environment variable already defaults to 1234, and `HOST` defaults to `localhost`.\n\n### Websocket Server with Persistence\n\nPersist document updates in a LevelDB database.\n\nSee [LevelDB Persistence](https://github.com/yjs/y-leveldb) for more info.\n\n```sh\nHOST=localhost PORT=1234 YPERSISTENCE=./dbDir node ./node_modules/y-websocket/bin/server.js\n```\n\n### Websocket Server with HTTP callback\n\nSend a debounced callback to an HTTP server (`POST`) on document update. Note that this implementation doesn't implement a retry logic in case the `CALLBACK_URL` does not work.\n\nCan take the following ENV variables:\n\n* `CALLBACK_URL` : Callback server URL\n* `CALLBACK_DEBOUNCE_WAIT` : Debounce time between callbacks (in ms). Defaults to 2000 ms\n* `CALLBACK_DEBOUNCE_MAXWAIT` : Maximum time to wait before callback. Defaults to 10 seconds\n* `CALLBACK_TIMEOUT` : Timeout for the HTTP call. Defaults to 5 seconds\n* `CALLBACK_OBJECTS` : JSON of shared objects to get data (`'{\"SHARED_OBJECT_NAME\":\"SHARED_OBJECT_TYPE}'`)\n\n```sh\nCALLBACK_URL=http://localhost:3000/ CALLBACK_OBJECTS='{\"prosemirror\":\"XmlFragment\"}' npm start\n```\nThis sends a debounced callback to `localhost:3000` 2 seconds after receiving an update (default `DEBOUNCE_WAIT`) with the data of an XmlFragment named `\"prosemirror\"` in the body.\n\n## License\n\n[The MIT License](./LICENSE) © Kevin Jahns\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2019 Kevin Jahns <kevin.jahns@protonmail.com>.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/y-websocket/-/y-websocket-1.3.16.tgz#0ec1a141d593933dfbfba2fb9fa9d95dca332c89",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/y-websocket/-/y-websocket-1.3.16.tgz",
    "hash": "0ec1a141d593933dfbfba2fb9fa9d95dca332c89",
    "integrity": "sha512-538dwNOQeZCpMfhh67y40goxHQZKubjoXtfhQieUF2bIQfHVV44bGFeAiYiBHgwOSRdwp7qG4MmDwU0M3U3vng==",
    "registry": "npm",
    "packageName": "y-websocket",
    "cacheIntegrity": "sha512-538dwNOQeZCpMfhh67y40goxHQZKubjoXtfhQieUF2bIQfHVV44bGFeAiYiBHgwOSRdwp7qG4MmDwU0M3U3vng== sha1-DsGhQdWTkz37+6L7n6nZXcozLIk="
  },
  "registry": "npm",
  "hash": "0ec1a141d593933dfbfba2fb9fa9d95dca332c89"
}