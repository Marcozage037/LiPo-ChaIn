{
  "manifest": {
    "name": "y-leveldb",
    "version": "0.1.0",
    "description": "LevelDb database adapter for Yjs",
    "type": "module",
    "main": "./dist/y-leveldb.cjs",
    "module": "./src/y-leveldb.js",
    "types": "./dist/src/y-leveldb.d.ts",
    "sideEffects": false,
    "funding": {
      "type": "GitHub Sponsors ❤",
      "url": "https://github.com/sponsors/dmonad"
    },
    "scripts": {
      "clean": "rm -rf dist",
      "test": "rollup -c && nyc --check-coverage --lines 100 --branches 100 --functions 100 --statements 100 node ./dist/test.cjs",
      "dist": "rollup -c",
      "lint": "markdownlint README.md && standard && tsc",
      "preversion": "npm run lint && npm run test && npm run clean && npm run dist && tsc && test -e dist/src/y-leveldb.d.ts && test -e dist/y-leveldb.cjs",
      "debug": "concurrently 'rollup -wc' 'http-server -o .'"
    },
    "files": [
      "dist/*",
      "src/*"
    ],
    "standard": {
      "ignore": [
        "/dist",
        "/node_modules",
        "/docs"
      ]
    },
    "repository": {
      "type": "git",
      "url": "git+https://github.com/yjs/y-leveldb.git"
    },
    "keywords": [
      "Yjs",
      "CRDT",
      "offline",
      "shared editing",
      "collaboration",
      "concurrency"
    ],
    "author": {
      "name": "Kevin Jahns",
      "email": "kevin.jahns@protonmail.com"
    },
    "license": "MIT",
    "bugs": {
      "url": "https://github.com/yjs/y-leveldb/issues"
    },
    "homepage": "https://yjs.dev/",
    "dependencies": {
      "level": "^6.0.1",
      "lib0": "^0.2.31"
    },
    "devDependencies": {
      "@rollup/plugin-commonjs": "^13.0.0",
      "@rollup/plugin-node-resolve": "^8.1.0",
      "concurrently": "^3.6.1",
      "http-server": "^0.12.3",
      "jsdoc": "^3.6.3",
      "level-mem": "^5.0.1",
      "markdownlint-cli": "^0.23.2",
      "nyc": "^15.1.0",
      "rollup": "^2.20.0",
      "rollup-plugin-node-polyfills": "^0.2.1",
      "standard": "^14.3.4",
      "typescript": "^3.9.6",
      "y-protocols": "^1.0.0",
      "yjs": "^13.2.0"
    },
    "peerDependencies": {
      "yjs": "^13.0.0"
    },
    "_registry": "npm",
    "_loc": "/home/jovyan/.cache/yarn/v6/npm-y-leveldb-0.1.0-8b60c1af020252445875ebc70d52666017bcb038-integrity/node_modules/y-leveldb/package.json",
    "readmeFilename": "README.md",
    "readme": "# LevelDB database adapter for [Yjs](https://github.com/yjs/yjs)\n\nLevelDB is a fast embedded database. It is the underlying technology of IndexedDB.\n\nInternally, y-leveldb uses [`level`](https://github.com/Level/level) which\nallows to exchange the storage medium for a different supported database.\nHence this adapter also supports rocksdb, lmdb, and many more..\n\n* Persistent storage for the server\n* Exchangeable storage medium\n* Can be used in [y-websocket](https://github.com/yjs/y-websocket)\n* A single y-leveldb instance can handle many documents.\n\n## Use it\n\nInstall this with bower or npm.\n\n```sh\nnpm install y-leveldb --save\n```\n\n```js\nimport { LeveldbPersistence } from 'y-leveldb'\n\nconst persistence = new LeveldbPersistence('./storage-location')\n\nconst ydoc = new Y.Doc()\nydoc.getArray('arr').insert(0, [1, 2, 3])\nydoc.getArray('arr').toArray() // => [1, 2, 3]\n\n// store document updates retrieved from other clients\npersistence.storeUpdate('my-doc', Y.encodeStateAsUpdate(ydoc))\n\n// when you want to sync, or store data to a database,\n// retrieve the temporary Y.Doc to consume data\npersistence.getYDoc('my-doc').getArray('arr') // [1, 2, 3]\n```\n\n## API\n\n### `persistence = LeveldbPersistence(storageLocation, [{ [level] }])`\n\nCreate a y-leveldb persistence instance.\n\nYou can use any levelup-compatible adapter.\n\n```js\nimport { LeveldbPersistence } from 'y-leveldb'\nimport level from 'level-mem'\n\nconst persistence = new LeveldbPersistence('./storage-location', { level })\n```\n\n### `persistence.getYDoc(docName: string): Promise<Y.Doc>`\n\nCreate a Y.Doc instance with the data persistet in leveldb. Use this to\ntemporarily create a Yjs document to sync changes or extract data.\n\n### `persistence.storeUpdate(docName: string, update: Uint8Array): Promise`\n\nStore a single document update to the database.\n\n### `persistence.getStateVector(docName: string): Promise<Uint8Array>`\n\nThe state vector (describing the state of the persisted document - see\n[Yjs docs](https://github.com/yjs/yjs#Document-Updates)) is maintained in a separate\nfield and constantly updated.\n\nThis allows you to sync changes without actually creating a Yjs document.\n\n### `persistence.getDiff(docName: string, stateVector: Uint8Array): Promise<Uint8Array>`\n\nGet the differences directly from the database. The same as\n`Y.encodeStateAsUpdate(ydoc, stateVector)`.\n\n### `persistence.clearDocument(docName: string): Promise`\n\nDelete a document, and all associated data from the database.\n\n### `persistence.setMeta(docName: string, metaKey: string, value: any): Promise`\n\nPersist some meta information in the database and associate it with a document.\nIt is up to you what you store here. You could, for example, store credentials\nhere.\n\n### `persistence.getMeta(docName: string, metaKey: string): Promise<any|undefined>`\n\nRetrieve a store meta value from the database. Returns undefined if the\n`metaKey` doesn't exist.\n\n### `persistence.delMeta(docName: string, metaKey: string): Promise`\n\nDelete a store meta value.\n\n### `persistence.getAllDocNames(docName: string): Promise<Array<string>>`\n\nRetrieve the names of all stored documents.\n\n### `persistence.getAllDocStateVectors(docName: string): Promise<Array<{ name:string,clock:number,sv:Uint8Array}`\n\nRetrieve the state vectors of all stored documents. You can use this to sync\ntwo y-leveldb instances.\n\nNote: The state vectors might be outdated if the associated document is not\nyet flushed. So use with caution.\n\n### `persistence.flushDocument(docName: string): Promise` (dev only)\n\nInternally y-leveldb stores incremental updates. You can merge all document\nupdates to a single entry. You probably never have to use this.\n\n## License\n\ny-leveldb is licensed under the [MIT License](./LICENSE).\n\n<kevin.jahns@protonmail.com>\n",
    "licenseText": "The MIT License (MIT)\n\nCopyright (c) 2020\n  - Kevin Jahns <kevin.jahns@rwth-aachen.de>.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
  },
  "artifacts": [],
  "remote": {
    "resolved": "https://registry.yarnpkg.com/y-leveldb/-/y-leveldb-0.1.0.tgz#8b60c1af020252445875ebc70d52666017bcb038",
    "type": "tarball",
    "reference": "https://registry.yarnpkg.com/y-leveldb/-/y-leveldb-0.1.0.tgz",
    "hash": "8b60c1af020252445875ebc70d52666017bcb038",
    "integrity": "sha512-sMuitVrsAUNh+0b66I42nAuW3lCmez171uP4k0ePcTAJ+c+Iw9w4Yq3wwiyrDMFXBEyQSjSF86Inc23wEvWnxw==",
    "registry": "npm",
    "packageName": "y-leveldb",
    "cacheIntegrity": "sha512-sMuitVrsAUNh+0b66I42nAuW3lCmez171uP4k0ePcTAJ+c+Iw9w4Yq3wwiyrDMFXBEyQSjSF86Inc23wEvWnxw== sha1-i2DBrwICUkRYdevHDVJmYBe8sDg="
  },
  "registry": "npm",
  "hash": "8b60c1af020252445875ebc70d52666017bcb038"
}